#!python
import os
import os.path as path
import subprocess
import argparse
from functools import reduce

from PIL import Image

CWD = os.getcwd()
OUT_DIR = path.join(CWD, 'out')

def process_args():
    parser = argparse.ArgumentParser(
        prog='Auld Tomes Build Script',
        description='Choreographs all tools into a sequential build.')

    parser.add_argument('-c', '--clean', dest='clean', action='store_true', help='Just clean the build')
    parser.add_argument('-p', '--premium', dest='is_premium', action='store_true', help='Build with premium puzzles')
    parser.add_argument('-n', '--no-export', dest='no_export', action='store_true', help='Don\'t export bin or html files')

    result = parser.parse_args()

    return result

def run(args):
    print(args)
    result = subprocess.run(args)
    if result.returncode != 0:
        raise Exception('upstream process failed!')
    return result

def run_s(str):
    print(str)
    result = os.system(str)
    if result != 0:
        raise Exception('upstream process failed!')
    return result

def clean():
    run(['rm', '-rf', OUT_DIR])

def mkdir(p):
    run(['mkdir', '-p', p])

def overwrite_whole_file(file_path, content):
    with open(file_path, 'w') as f:
        f.write(content)

def get_list_runs(list):
    run_length = 0
    runs = []
    for cell in list:
        if cell:
            run_length += 1
        else:
            if run_length > 0:
                runs.append(run_length)
                run_length = 0

    if run_length > 0 or len(runs) == 0:
        runs.append(run_length)

    return runs

class Puzzle:
    def __init__(self, name, size, grid):
        self.name = name
        self.size = size
        self.grid = grid
        self.difficulty = self.get_difficulty()

    def get_string(self):
        puzzle_string = f'{self.name}|{self.size}|'
        for row in self.grid:
            for pixel in row:
                puzzle_string += '1' if pixel else '0'

        return puzzle_string

    def get_difficulty(self):
        row_runs = []
        for row in self.grid:
            row_runs.append(get_list_runs(row))

        col_runs = []
        for col_index in range(0, self.size):
            column = []
            for row_index in range(0, self.size):
                column.append(self.grid[row_index][col_index])

            col_runs.append(get_list_runs(column))

        def get_run_totals(runs):
            total = 0
            for run in runs:
                if len(run) == 1:
                    if run[0] != 0 and run[0] != 15:
                        total += 1
                else:
                    total += len(run)

            return total

        return get_run_totals(row_runs) + get_run_totals(col_runs)

def iterate_puzzle_folder(puzzles_path, puzzle_info):
    for puzzle in os.listdir(puzzles_path):
        with Image.open(path.join(puzzles_path, puzzle)) as imFile:
            size = imFile.size[0]
            if size != imFile.size[1]:
                raise Exception(f'{puzzle} is not square! {imFile.size}')
            elif size != 15:
                raise Exception(f'{puzzle} is not unsupported size! {imFile.size}')

            pixels = imFile.load()
            grid = []
            for row in range(0, size):
                grid_row = []
                for col in range(0, size):
                    grid_row.append(pixels[col, row] == (0, 0, 0) or pixels[col, row] == (0, 0, 0, 255))
                grid.append(grid_row)

            puzzle_info.append(Puzzle(puzzle.split(".")[0], size, grid))

def create_puzzle_file(is_premium):
    puzzles_path = path.join(CWD, 'puzzles')
    puzzle_info = []
    iterate_puzzle_folder(puzzles_path, puzzle_info)

    if is_premium:
        premium_puzzles_path = path.join(CWD, 'oh_no_nogram_premium_puzzles', 'puzzles')
        if not path.exists(premium_puzzles_path):
            print('Premium puzzles not found.')
            exit(-1)
        else:
            iterate_puzzle_folder(premium_puzzles_path, puzzle_info)

    sorted_info = sorted(puzzle_info, key=lambda p: p.difficulty)

    puzzles_file_text = f'''
        g_all_puzzles_str = "{','.join(map(lambda p: p.get_string(), sorted_info))}"

        g_puzzles = split(g_all_puzzles_str, ',', false)

        '''

    overwrite_whole_file(path.join(OUT_DIR, 'puzzles.lua'), puzzles_file_text)

    # Leave a guide so the dev knows where they all ended up
    puzzle_guide_string = ''
    for i in range(0, len(sorted_info)):
        puzzle = sorted_info[i]
        puzzle_guide_string += f'{i + 1}: {puzzle.name} ({puzzle.difficulty})\n'

    overwrite_whole_file(path.join(OUT_DIR, 'puzzle_guide.txt'), puzzle_guide_string)

def full_build(export, is_premium):
    create_puzzle_file(is_premium)
    if export:
        web_path = path.join(OUT_DIR, 'web')
        mkdir(web_path)
        run_s(f'pico8 oh_no_nogram.p8 -export "index.html"')
        run(['mv', 'index.html', web_path])
        run(['mv', 'index.js', web_path])

def main():
    args = process_args()

    if args.clean:
        clean()
        return

    clean()
    mkdir(OUT_DIR)
    full_build(not args.no_export, args.is_premium)

if __name__ == '__main__':
    main()
